<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<!--
Notes.mxml is the main view of the SharedNotes application
-->
<MDIWindow xmlns="flexlib.mdi.containers.*"
        xmlns:mx="http://www.adobe.com/2006/mxml"
	width="500" height="580" 
	xmlns:mate="http://mate.asfusion.com/" 
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	creationComplete="onCreationComplete()"
	label="Create Poll" layout="absolute" 
	title="{ResourceUtil.getInstance().getString('bbb.polling.createPoll')}">
	
	<!-- Pre Defined Validation -->
	
	 

	
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.bigbluebutton.main.views.MainCanvas;
			import mx.controls.Alert;
			import org.bigbluebutton.common.LogUtil;
			import mx.validators.Validator;	
			import mx.utils.ObjectUtil;


			
			import mx.collections.ArrayCollection;
			import mx.core.IUIComponent;
			import mx.controls.CheckBox;
			import mx.controls.RadioButton;
			import org.bigbluebutton.modules.polling.events.SavePollEvent;
			import org.bigbluebutton.modules.polling.events.PublishPollEvent;
			import org.bigbluebutton.modules.polling.managers.PollingManager;
		
			import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent; 
			import org.bigbluebutton.modules.polling.events.StartPollingEvent;
			import org.bigbluebutton.modules.polling.events.AcceptPollingInstructionsWindowEvent;
			import org.bigbluebutton.modules.polling.events.PollingViewWindowEvent;
			import org.bigbluebutton.modules.polling.events.PollingStatusCheckEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			

			
			
			public static const LOGNAME:String = "[PollingInstructionsWindow] ";	
			public var moduleAttributes:Object;
			private var userName:String;
			private  var module:PollingModule;
		//	private var allowedChars:RegExp = /^[^;\\]*$/; // for security reasons some  characters are not allowed

			// Bindable is set to allow data to change when You hit Back and change something, this change will appear in review
			[Bindable]private var _title:String;
			[Bindable]private var _question:String;
			[Bindable]private var _answers:ArrayCollection;
			[Bindable]private var _isMultiple:Boolean =false;
			private var _answersArray:Array;
			
			public var publishingAllowed:Boolean = true;
			
			private var manager:PollingManager = new PollingManager();
			
			
			// LENGTH CONSTRAINTS ( CHANGE IF YOU NEED)
			//################################################
			[Bindable]private var _MAX_QUESTION_LENGTH:uint = 200;
			[Bindable]private var _MAX_TITLE_LENGTH:uint=50;
			[Bindable]private var _MAX_ANSWER_LENGTH:uint = 100;
			[Bindable]private var _MAX_ANSWERS_AMOUNT:uint = 10;
			[Bindable]private var _ANSWER_CHARS_PER_LINE:uint=28; // made to avoid scrollbars (can be changed )
			//###############################################
			
			
			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
			

 
			private function onCreationComplete():void{
				//LogUtil.debug(LOGNAME + "Inside Creation Complete");
				//LogUtil.debug(LOGNAME + "Instructions Window is Created");
				userName = moduleAttributes.username;
				this.module = module;
			}
			
			// Overwritting close to use custom function
			override public function close(event:MouseEvent = null):void {
				closeInstructionsWindow();
			}
			// function invoked when close window
			private function closeInstructionsWindow():void {	
				//LogUtil.debug(LOGNAME + "inside  closeinstructionsWindow");		

				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.CLOSE));				
			}			
			// function invoked when checkbox is checked
			private function isMultiple():void{
			
			     if(multiple_response.selected == true)
				    _isMultiple= true;
			        else 	
					_isMultiple= false;
			}
			
				
			private function openAcceptInstructions():void {
				//LogUtil.debug(LOGNAME + "inside  acceptInstructions");		
				dispatchEvent(new AcceptPollingInstructionsWindowEvent(AcceptPollingInstructionsWindowEvent.OPEN));
				closeInstructionsWindow()
			titleErrMsg.text="";
			}
			

			/*private function StartPolling():void {
			
				LogUtil.debug(LOGNAME + "inside  StartPolling calling StartPollingEvent ");		
				dispatchEvent(new StartPollingEvent(StartPollingEvent.START));
				closeInstructionsWindow();
			}*/
			
			
			
			
	//TESTING 
			private function reviewChanges():void{
				LogUtil.debug(LOGNAME + "WHAT WE HAVE:");
				LogUtil.debug(LOGNAME + "Title: "+_title);
				LogUtil.debug(LOGNAME + "Question: "+_question);
				LogUtil.debug(LOGNAME + "Answers: "+_answers);
				if(_isMultiple) LogUtil.debug(LOGNAME + "Multiple answers allowed");
				//dispatchEvent(new AcceptPollingInstructionsWindowEvent(AcceptPollingInstructionsWindowEvent.OPEN));
				
			
			}
	 // END TESTING		
			
			// DATA VALIDATION
			//##################################################################################
			
			
			private function validateAndSubmit():void {
			  var valid:Boolean = true;
			  
			  // Gathering Error Messages
				titleErrMsg.text = titleError();
				qErrMsg.text = questionError();
				aErrMsg.text = answerError();
				
			// Making Error messages Visible if there is an Error
			
			    if (titleErrMsg.text != "VALID"){ // checking if function returned any error string
			     	titleErrMsg.visible=true;
			     	valid = false;	// setting flag to false in case of error
			    }else 
			       titleErrMsg.visible=false;
			   
			   
			    if(qErrMsg.text != "VALID"){
			    	qErrMsg.visible=true;
			    	valid = false;	
			    } else 
			        qErrMsg.visible=false;
			    
			    
			    if (aErrMsg.text != "VALID") {
			    	aErrMsg.visible=true;
			    	valid = false;	

			    }else 
			        aErrMsg.visible=false;
			   
			    if(valid){
			  //  LogUtil.debug(LOGNAME + "passisibg  drawcheckboxes : "  + _answers.length + " " +_answers);	
			    formatAndReview();
			    //_poll = ResourceUtil.getInstance().getString('bbb.polling.pollPreview');
			    
			    	
			    }
			
				allowPublishing();
			//	LogUtil.debug(LOGNAME + "Publishing is allowed? " + publishingAllowed);
				publishButton.enabled = publishingAllowed;
			}
			
			// GENERATING ERROR MESSAGES
			//################################
			//TITLE VALIDATION_cb.numChildren
			private function   titleError():String{
			
			
			   var errMsg:String = "VALID";

			     if (pollTitle.length == 0 )
			     		errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.noTitle');
			     	else if (pollTitle.length > _MAX_TITLE_LENGTH )
			     		errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.tooLongTitle')+" " +_MAX_TITLE_LENGTH;	
			       		//else if(!allowedChars.test(pollTitle.text))
			   			//errMsg = "Title has forbidden characters";
			   			else
			   				_title = pollTitle.text;			
			  return errMsg;
			}
			
			//QUESTION VALIDATION
			private function   questionError():String{
			
			   var errMsg:String = "VALID";
			     if (pollQuestion.length == 0 )
			     		errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.noQuestion');
			     	 else if (pollQuestion.length > _MAX_QUESTION_LENGTH )
			     		errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toolongQuestion') + " "+ _MAX_QUESTION_LENGTH;		
			      		// else if(!allowedChars.test(pollQuestion.text))
			   			//errMsg = "Question field has forbidden characters";	
			   	   else	
			   	   	_question=pollQuestion.text;			
			  return errMsg;
			}
			
			
		
			// ANSWER VALIDATION
			private function   answerError():String{
			
			   var errMsg:String = "VALID";
			 //  var startWithStar:RegExp = /^[*]/; // should start with *
			   var answersArray:Array; 
			   var valid:Boolean=true;
		     
		     		answersArray = pollAnswers.text.split("\r"); // splitting by '*' and new line, thus user can type '*' anywhere except the newline
		     		//answersArray[0] = answersArray[0].split('*').join(''); // As after split '*' is not displayed we need to  take off from first element which is not splitted
		     		answersArray = makeAnswersPretty(answersArray);		
		     	// ALL THE MESSAGES NEED TO BE LOCALISED!!!!!
			     if (pollAnswers.length == 0 )
			     		errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.atLeast2Answers');
			      // else if(!allowedChars.test(pollAnswers.text))
			   	//	errMsg = "Answer field has forbidden characters";
			   //	 else if (!startWithStar.test(pollAnswers.text))
			   //	 	errMsg = "Every answer should start with  a new line and '*' (e.g *Seneca)";
			   	     else if (isDuplicateAnswers(answersArray))
			   	        		 errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.answerUnique');	
			   	 	else if(answersArray.length < 2)
			   	 	 	 errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.eachNewLine');
			   	 	   else if(answersArray.length > _MAX_ANSWERS_AMOUNT)
			   	 	  		errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toomuchAnswers') +" "+_MAX_ANSWERS_AMOUNT;
			   	 		else {
			   	 	
			   	 			
			   	 		// If user just put '*' without any answer we need to remove this element from array
			   	  
			   			 for (var i:int=0; i< answersArray.length; i++){
			   	 			//	LogUtil.debug("inside array element [" +i+"] is " +answersArray[i]);
			   	 		    if(i != 0 && (answersArray[i] == null || answersArray[i] == "")){
			   	 						answersArray.splice(i,1);
			   	 				  //  	LogUtil.debug("deleting element " + i + "because it is empty");
			   	 		    }else if(answersArray[i].length > _MAX_ANSWER_LENGTH){
			   	 		    	errMsg = ResourceUtil.getInstance().getString('bbb.polling.validation.toolongAnswer') +" "+_MAX_ANSWER_LENGTH;
			   	 		    	valid=false;
			   	 		    }
			   	 		    // if last character of the array element is  return (new line) or space, we it to have accurate string and than checking for duplicates again
			   	 		    
			  
			   	 		//    LogUtil.debug("answers array elementr:" + answersArray[i].substring(0,answersArray[i].length-1))

			   	 		    
			   	 		    
			   	 		 if(valid &&  !isDuplicateAnswers(answersArray)){	
			   	 		 	_answers  = new ArrayCollection(answersArray);	// This will be displayed in Preview
			   	 		 	_answersArray= answersArray; // this will be sent to server
			   	 		 }
			   	 		
			   	        		 
			   	        		 
			   	 		//TESTING TO BE DELETED WHEN WORKS
			   	 		for (var b:int=0; b<  _answers.length; b++){
			   	 		//LogUtil.debug("global element [" +b+"] is " + _answers.getItemAt(b));
			   	 		
			   	 		}  	 		
			   	 	}	
			}
			return errMsg;
		}	
			
			
		//#####################################################################################################	
		
		
		public function goBack():void{
		//	_poll = ResourceUtil.getInstance().getString('bbb.polling.createPoll');
		  	back.visible=false;
			publishButton.visible=false;
		  	options.removeAllChildren();

		}
		
		 private function isDuplicateAnswers(arr:Array):Boolean{
  	 
        	  var x:uint;
   		  var y:uint;
   		   
    			for (x = 0; x < arr.length ; x++){
        			for (y = x + 1; y < arr.length; y++){
            				if (arr[x] === arr[y]){
                				return true;
            				}
        			}
    			}
    			return false;
		}
		
		//trimming return and whitespaces at the end of each array element
		
		private function makeAnswersPretty(arr:Array):Array{
		 var i:uint;
		 
		
		 var trim:RegExp = /^\s+|\s+$/g;
		
	  	  for (i = 0; i < arr.length; i++){
	  	  
	  	  	//LogUtil.debug("BEFORE REPLACE: " + arr[i]);
		  	  arr[i] = arr[i].replace(trim, "");
		  	
		  	 
		  	 if(!arr[i]) //if user puts just return or space and return -  this array elements will be deleted
		  	 	arr.splice(i,1);
		    }
		   
		   return arr;	
		
		}
		
		
		private function formatAndReview():void{
			
			// Change maind window and buttons to Review
			
			mainArea.selectedChild=review;
			buttons.selectedChild=reviewButtons;
		
			//REFRESHING CANVAS
			invalidateDisplayList();
			validateNow(); 
			// Make Back button visible
			back.visible=true;
			publishButton.visible=true;
			
			// if Multiple enabled than add check all that apply to string, or if it already added and user desided he don't want multiple than delete it
			    	if(_isMultiple){
			    		_question += "\n" + ResourceUtil.getInstance().getString('bbb.polling.pollPreview.checkAll'); // NEED TO BE LOCALIZED
			    	   }
			    	   else if(( !_isMultiple && _question.substr(_question.length-28,_question.length) == "\n (check all that may apply)" )) // NEED TO BE LOZALIZED
					           _question.slice(0,_question.length-28);
			    	     
			 // Make Title and Question  string  first letter Upper case
			  _title =   upperFirstLetter(_title);	    
			  _question = upperFirstLetter(_question);
			  createButtons(_answers.length,_answers);

			  
		 }	     	
			    	

		
		
		private function upperFirstLetter(str:String) : String {
		
 			return str.substr(0, 1).toUpperCase() + str.substr(1, str.length);
		}	
		
		
		// function receives Array.length and ArrayCollection
		private function createButtons(amount:uint, content:ArrayCollection):void{
		
			
			 var _cb:CheckBox;
			 var _rb:RadioButton;
			 var _tx: Text;
			 var _hb: HBox; 
			
			 // creating buttons one by one
			   for (var i:int = 0; i < amount; i++) {
					
				_tx = new Text();
				_hb = new HBox();
				_tx.name = "option" +i;
				_tx.width = 200;
				 // assigning array element to text field
				 _tx.text =content.getItemAt(i).toString(); 
				 options.addChild(_hb);
				 
				 // if global var _isMultiple is true it means user wants checkboxes, 
				 //otherwise radiobutton (if multiple choices are allowed)
					if(_isMultiple){
				
				 	   _cb= new CheckBox();
				 	   // giving button a name of array elelment to process it easier later
				    	   _cb.name=content.getItemAt(i).toString(); 
				    	    // gap between the buttons
 				    	   _cb.y=i*20;
 				    	   // adding buttons to the Horizontal Box
 				    	   _hb.addChild(_cb); 
 				    
				 		 }else{
				  
				 	     	    _rb = new RadioButton();
				 	              _rb.name = content.getItemAt(i).toString(); // giving button a name of array elelment to process it easier later
				 	              _rb.groupName = "answers";
				 	              _rb.label =" ";	
				 	              _hb.addChild(_rb);
				     
				     
				 		 }    
				 		_hb.addChild(_tx); // adding text near button
				 
    			   		
				 } // end of loop
		
			} // end of function
			
			   
    	 

 

			private function savePoll(callingFromPublish:Boolean = false):void {
				LogUtil.debug(LOGNAME + "inside  savePoll calling service method savePoll() ");		
				//manager.savePoll(_answers, _question, _title, _isMultiple);
				
				var savePollEvent: SavePollEvent = new SavePollEvent(SavePollEvent.SAVE);
				//savePollEvent.answers = _answers;
				savePollEvent.answers = _answersArray;
				savePollEvent.question = _question;
				savePollEvent.title = _title;
				savePollEvent.isMultiple = _isMultiple;
				dispatchEvent(savePollEvent);
				 if(!callingFromPublish)
				      closeInstructionsWindow();
			}
			
			private function publish():void {
				
				savePoll(true);
				LogUtil.debug(LOGNAME + "inside publish calling servie method getPoll()");
				
				var publishPollEvent: PublishPollEvent = new PublishPollEvent(PublishPollEvent.PUBLISH);
				LogUtil.debug(LOGNAME + "after PUBLISH constructor");
				
				//var viewEvent: PollingViewWindowEvent = new PollingViewWindowEvent(PollingViewWindowEvent.OPEN);
				LogUtil.debug(LOGNAME + "after VIEW constructor");
				
				
				// sending title 
				
				publishPollEvent.title = _title;
				LogUtil.debug(LOGNAME + "inside publish survived key generation");
				
				dispatchEvent(publishPollEvent);
				LogUtil.debug(LOGNAME + "inside publish survived dispatch event");
				
				//dispatchEvent(viewEvent);
				//LogUtil.debug(LOGNAME + "inside view survived dispatch event");
			
				dispatchEvent(new StartPollingEvent(StartPollingEvent.START));	
				closeInstructionsWindow();
			}
			
			private function allowPublishing():void {
				dispatchEvent(new PollingStatusCheckEvent(PollingStatusCheckEvent.CHECK));
				LogUtil.debug(LOGNAME + "Survived status checking, status is " + publishingAllowed);
			}
			
		]]>
	</mx:Script>
	

          
        
          <mx:ViewStack id="mainArea" width="100%">
          
           <!-- ################### MAIN AREA ##############-->  
           
           <!-- Instructions Window with Form-->
              <mx:Canvas id="instrMain" width="90%" height="90%">
           	<mx:VBox width="90%" height="90%" >
           	
            		<mx:Form width="100%"  id="instructionsForm"  paddingTop="30" paddingBottom="10" paddingLeft="30">
            
	   		   <mx:FormItem fontWeight="bold"   label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.title')}" paddingLeft="35" required="true" >
				<mx:TextInput id="pollTitle" /> 
				<mx:Label id="titleErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal"/> 
  		          </mx:FormItem>
		
	      		<mx:FormItem  fontWeight="bold" label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.question')}" paddingLeft="35"  paddingTop="20"  >
				<mx:TextArea id="pollQuestion" width="200" height="100" /> 
				<mx:Label id="qErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal" /> 
	     		</mx:FormItem>
	     
	     
	      		<mx:FormItem  fontWeight="bold" label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.answers')}" paddingLeft="35"  paddingTop="30"  >
				<mx:TextArea id="pollAnswers" width="200" height="100" /> 
				<mx:Label id="answerHint"  text="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.hint')}" visible="true" width="100%"  fontSize="9" fontWeight="normal" /> 
	    		</mx:FormItem>
	     
	     		<mx:FormItem  fontWeight="bold"  paddingLeft="20"  paddingTop="5"  >
	     			<mx:Label id="aErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal" /> 
	     		</mx:FormItem>
	     
	     		 <mx:FormItem  paddingLeft="10"  paddingTop="20" >
	     		    <mx:CheckBox id="multiple_response" label="{ResourceUtil.getInstance().getString('bbb.polling.createPoll.moreThanOneResponse')}" click="isMultiple()" />
	     		 </mx:FormItem>
	   
	   	  </mx:Form>   
	  	</mx:VBox>
	    </mx:Canvas>
	    
	    
	     <!-- Review Window that is invoked when Next button is clicked -->
	    <mx:Canvas id="review">
          		 <mx:VBox width="90%" height="90%"  paddingLeft="40">
          		 	
          		 	<mx:Label   text="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.hereIsYourPoll')}" fontSize="11" fontWeight="bold" width ="100%" paddingTop="60" paddingLeft="20" paddingBottom="20"/> 
          		 	<mx:Panel id="titleShow"  title="{_title}" width="90%"  >
          		 	
          		 	
          		 	 <mx:VBox paddingLeft="40" paddingBottom="40">
          		 			<mx:Text   text="{_question}" fontSize="10" fontWeight="bold"  paddingBottom="20" paddingTop="20"  width="{_MAX_QUESTION_LENGTH}"/>
          		 		
						
          		 		 	<mx:Box id="options" >
          					</mx:Box>
          					
          					
   						
          		 	</mx:VBox>
          		 	</mx:Panel> 
          		 	
          		 	<mx:Label   text=" {ResourceUtil.getInstance().getString('bbb.polling.pollPreview.ifYouWantChanges')}" 
          		 		    fontSize="11" 
          		 		    fontWeight="normal" width ="100%"  
          		 		    paddingLeft="20" paddingBottom="20" paddingTop="20"
          		 		    /> 				
          		 	
	   		</mx:VBox>
	    </mx:Canvas>
	    </mx:ViewStack>	
	  
	   <!-- ###################BUTTONS##############-->  
	   <!-- area where buttons are located -->
	   <mx:ControlBar x="60" y="460"  >
		<mx:HBox paddingLeft="20" paddingRight="10" paddingTop="10" paddingBottom="10"> 
		<!-- Back Button is not visible while instructions and visible while preView -->
		 <mx:Button id="back" label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.modify')}" click="{mainArea.selectedChild=instrMain} {buttons.selectedChild=instrButtons} goBack()"  width="100" height="30" visible="false"/>
		   
		   <mx:Button id="publishButton" label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.publish')}" click="publish()"  width="100" height="30" visible="false"/>
		 <mx:ViewStack id="buttons">
		 
		   <!--buttons that appear when Instructions is displayed -->
		    <mx:Canvas id="instrButtons">
			<mx:Button id="next" label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.preview')}" click="validateAndSubmit()"  width="100" height="30"/>	
		   </mx:Canvas>
		   <!-- buttons that appear on Review  -->
		   <mx:Canvas id="reviewButtons">
			<mx:Button id="SavePoll" label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.save')}" click="savePoll()"  width="100" height="30"/>
		   </mx:Canvas>	
		   
		   </mx:ViewStack>
		    <!-- Cancel button appear everywhere -->
		    <mx:Button id="Cancel" label="{ResourceUtil.getInstance().getString('bbb.polling.pollPreview.cancel')}" click="closeInstructionsWindow()"  width="100" height="30"/>
		    
		
		</mx:HBox>	 
	   </mx:ControlBar> 

</MDIWindow>

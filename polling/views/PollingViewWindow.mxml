<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="310" height="150" 
	xmlns:mate="http://mate.asfusion.com/" 
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	creationComplete="onCreationComplete()"
	label="Polling" layout="absolute" 
	title="Polling">

	<mx:Script>
		<![CDATA[
		import flexlib.mdi.events.MDIWindowEvent;
			
			import org.bigbluebutton.main.views.MainCanvas;
			import mx.controls.Alert;
			import org.bigbluebutton.common.LogUtil;	 
			import org.bigbluebutton.modules.polling.events.StartPollingEvent;
			import org.bigbluebutton.modules.polling.events.PollingViewWindowEvent;
			import org.bigbluebutton.modules.polling.managers.PollingManager;

			import mx.validators.Validator;	
			import mx.utils.ObjectUtil;
			
			import mx.collections.ArrayCollection;
			import mx.core.IUIComponent;
			import mx.controls.CheckBox;
			import mx.controls.RadioButton;
			import mx.controls.Text;
		    import mx.containers.*;
		    import mx.controls.*;


		   	public static const LOGNAME:String = "[PollingViewWindow] ";
			
			public var isMultiple:Boolean;
			[Bindable] public var question:String;
			[Bindable] public var answers:Array;
			public var votes:Array;
			public var time:String;
			
			public var moduleAttributes:Object;
			private var _userid:Number; 
			private var window:PollingViewWindow;
			
			public var cbSelected:Array;



			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
				
			
						
			private function closeWindow():void{
				LogUtil.debug(LOGNAME + "inside closeWindow()");
				dispatchEvent(new PollingViewWindowEvent(PollingViewWindowEvent.CLOSE));
			}
 
 
			private function onCreationComplete():void{
				LogUtil.debug(LOGNAME + " Inside Creation Complete");
				 createButtons(answers.length,answers);
				 			invalidateDisplayList();
							validateNow(); 
				
				var lines:int = (question.length / 28) + 1;
				for(var s:String in answers){
					lines = lines + ((s.length / 28) + 1);	
				}				 	            
				
				
				height = height + (lines * 50);
			}
			
			
			// This function will receive information and generate radiobuttons on fly
			
			
			// function receives Array.length and ArrayCollection
			private function createButtons(amount:uint, content:Array):void{
		
			LogUtil.debug(LOGNAME+" here are answers:" + content+ " Amount of answers is : " +amount);
			 var _cb:CheckBox;
			 var _rb:RadioButton;
			 var _tx: Text;
			 var _hb: HBox; 
			 var  _rb_group:RadioButtonGroup = new RadioButtonGroup();

			 // creating buttons one by one
			 
			   for (var i:int = 0; i < amount; i++) {
					
				_tx = new Text();
				_hb = new HBox();
				LogUtil.debug(LOGNAME+" Box is "+ _hb);
				_tx.name = "option" +i;
				_tx.width = 200;
				 // assigning array element to text field
				// LogUtil.debug(LOGNAME+" Once again content is " + content+ " 'i' is  : " + i + "and contet[i] is "+ content[i]);
				 
				 _tx.text =content[i].toString(); 
				 
				 LogUtil.debug(LOGNAME+" Tx Text is " + _tx.text);
				 
				 
				 answerBox.addChild(_hb);
			
				 
				 // if global var isMultiple is true it means user wants checkboxes, 
				 //otherwise radiobutton (if multiple choices are allowed)
					if(isMultiple){
						cbSelected = new Array();
				 	   _cb= new CheckBox();
				 	   // giving button a name of array elelment to process it easier later
				    	   //_cb.label=content[i].toString(); 
				    	   _cb.id = "answers"+(i+1);
				    	   _cb.addEventListener(MouseEvent.CLICK, checkBoxClick);
				    	   // _cb.addEventListener(click, onClick(_cb.id.charAt(_cb.id.length-1)));
				    	    // gap between the buttons
 				    	   _cb.y=i*20;
 				    	   
 				    	   // adding buttons to the Horizontal Box
 				      	   _hb.addChild(_cb);
 				      	   LogUtil.debug(LOGNAME+" Generated checkbox with id: " + _cb.id);
 				      	   LogUtil.debug(LOGNAME+" Generated checkbox with name: " + _cb.name);
 				    }else{
				 	     	      _rb = new RadioButton();
				 	     	      _rb.groupName = "answersGroup";
				 	              _rb.name = content[i].toString(); // giving button a name of array elelment to process it easier later
				 	              _rb.id = "answers"+(i+1);
				 	               _hb.addChild(_rb);
				 	              LogUtil.debug("RadioButton id is " + _rb.id.toString());

				 		 }    
				 		_hb.addChild(_tx); // adding text near button			 
    			   		
				 } // end of loop
				 
				 answerBox.validateNow();	
		
			} // end of function createButtons
			
			
			private function Vote():void{
				// var voteEvent: VoteEvent = new VoteEvent(VoteEvent.START);
								
				if (isMultiple){
					// Checkboxes
					LogUtil.debug(LOGNAME + "[TEST] Testing CheckBoxes");
					LogUtil.debug(LOGNAME + "[TEST] AnswerBox has children: " + answerBox.numChildren);
					for (var i:int = 0; i < answerBox.numChildren; i++){
						LogUtil.debug(LOGNAME + "[TEST] For loop i value is: " + i);
						var child:DisplayObject = answerBox.getChildAt(i);
						LogUtil.debug(LOGNAME + "[TEST] Get AnswerBox child at I value is: " + answerBox.getChildAt(i));
						LogUtil.debug(LOGNAME + "[TEST] Copied child shows up as          : " + child);
						
						// voteEvent.answerID = cbSelected;
					}
				}else{
					// Radio Buttons
					var selectedAnswer:String = answersGroup.selection.toString();
					LogUtil.debug(LOGNAME + "Inside vote() Full string for selected answer: " + selectedAnswer);
					LogUtil.debug(LOGNAME + "Inside vote() Index for selected answer: " + selectedAnswer.charAt(selectedAnswer.length-1));
					// voteEvent.answerID.add(selectedAnswer.charAt(selectedAnswer.length-1));
				}
				closeWindow();
			}
			
			private function checkBoxClick(e:Event):void{
				LogUtil.debug(LOGNAME + " On entry, cbSelected is " + cbSelected);
				//LogUtil.debug(LOGNAME + " Current target is " + e.currentTarget);
				var boxID:String = e.currentTarget.toString();
				LogUtil.debug(LOGNAME + " BoxID is " + boxID.charAt(boxID.length-1));
				
				var match:Boolean = false;
				var target:int;
				
				LogUtil.debug("Array size is " +cbSelected.length);
				
				// Goes through each element of the array, looks for a match to boxID
				for (var i:int = 0; i < cbSelected.length; i++){
					if (cbSelected[i] == boxID.charAt(boxID.length-1)){
						LogUtil.debug(cbSelected[i] + " matches " + boxID.charAt(boxID.length-1));
						match = true;
						target = i;
					}
					else{LogUtil.debug(cbSelected[i] + " does not match " + boxID.charAt(boxID.length-1));}
				}
				// If a match is found, delete that element. If no match is found, add boxID to the array
				if (match){
					cbSelected.splice(target, 1);
					LogUtil.debug(LOGNAME + " This box was checked, and is now unchecked");
				}else{
					cbSelected.push(boxID.charAt(boxID.length-1));
					LogUtil.debug(LOGNAME + " This box was NOT checked, and now it is");
				}
				
				LogUtil.debug(LOGNAME + " On exit, cbSelected is " + cbSelected);
			}
	
			
		]]>
	</mx:Script>

	
       				 <mx:RadioButtonGroup id="answersGroup"/>
 
	
	<!-- Prototype of Polling Module Design -->
        <mx:VBox width="100%" height="75%" horizontalAlign="center" paddingLeft="10" paddingRight="10">
          
               <mx:Text width="200" 
               		paddingTop="30" paddingBottom="10" 
               		fontWeight="bold" textAlign="center"
                    text="{question}"/>
     
        		<mx:Box id="answerBox"  width="90%" height="90%" >
        			
        		</mx:Box>
  					
          		
          		
       </mx:VBox>
       <mx:ControlBar width="100%" horizontalAlign="center">
       <mx:Button id="btnAcceptPoll" label="Vote" click="Vote()"  width="100" height="30"/>
       </mx:ControlBar> 	 


</MDIWindow>

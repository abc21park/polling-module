<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $



-->
<!--mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"	
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.polling.toolTip')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent"
	>
	<mx:Script>
		<![CDATA[
		    import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
	       	import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
			import org.bigbluebutton.modules.polling.events.ToolbarComboEvent;
			
			import org.bigbluebutton.modules.polling.model.ToolbarPollingRenderer;
			import org.bigbluebutton.modules.polling.model.ValueObject;
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			
			private var images:Images = new Images();
			
			[Bindable] public var pollIcon:Class = images.pollIcon;
			[Bindable] private var myMenuData:ArrayCollection = new ArrayCollection();
			private function createAndShow():void{
				var myMenu:Menu = Menu.createMenu(null, myMenuData, false);
            	myMenu.itemRenderer = new ClassFactory(ToolbarPollingRenderer);
			}
			
			public function init():void {
            	myMenuData.addItem(new ValueObject("MA", "MenuItem A", "menuOddItem"));
            }
			
			public static const LOGNAME:String = "[Polling (views) : ToolbarButton] ";
			
			/*private function openPollingInstructions():void {
				LogUtil.debug(LOGNAME +"openPollingInstructions() - clicked icon");
				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.OPEN));
				this.enabled = false;
				LogUtil.debug(LOGNAME +"COMBO: sending event");
				dispatchEvent(new ToolbarComboEvent(ToolbarComboEvent.ADD));
				LogUtil.debug(LOGNAME +"COMBO:after sending event");
			}*/
			
			public function getAlignment():String{
				LogUtil.debug(LOGNAME +"Aligning Poll button");
				return MainToolbar.ALIGN_RIGHT;
			}
		]]>
	</mx:Script>
	<mx:VBox>
		<mx:Button id="myButton" initialize="init()" label="Open Menu" click="createAndShow();"/>    
    </mx:VBox>
</mx:Application-->

<!-- -->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"	
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.polling.toolTip')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent"
	initialize="init()" 
	click="createAndShow();"
	icon="{pollIcon}" 
	>
	<mx:Script>
		<![CDATA[
		    import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
	       	import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
			import org.bigbluebutton.modules.polling.events.ToolbarComboEvent;
			
			import org.bigbluebutton.modules.polling.model.ToolbarPollingRenderer;
			import org.bigbluebutton.modules.polling.model.ValueObject;
			import mx.collections.ArrayCollection;
			import mx.controls.*;
			
			private var images:Images = new Images();
			
			[Bindable] public var pollIcon:Class = images.pollIcon;
			[Bindable] private var myMenuData:ArrayCollection = new ArrayCollection();
			
			public static const LOGNAME:String = "[Polling (views) : ToolbarButton] ";
			
			private function createAndShow():void{
				LogUtil.debug(LOGNAME +"Toolbar Polling Button Clicked");
				var myMenu:Menu = Menu.createMenu(null, myMenuData, false);
				myMenu.itemRenderer = new ClassFactory(ToolbarPollingRenderer);
            	//myMenu.dataProvider = myMenuData;
            	myMenu.show(this.x + 10, this.y + this.height + 10);
            	LogUtil.debug(LOGNAME +"Survived CreateandShow");
			}
			
			public function init():void {
				LogUtil.debug(LOGNAME +"Entering function init()");
            	myMenuData.addItem(new ValueObject("MA", "MenuItem A"));
            	myMenuData.addItem(new ValueObject("MB", "MenuItem B"));
            	myMenuData.addItem(new ValueObject("MC", "MenuItem C"));
            	myMenuData.addItem(new ValueObject("MD", "MenuItem D"));
            	LogUtil.debug(LOGNAME +"Survived menudata.additem");
            }			
								
			public function getAlignment():String{
				LogUtil.debug(LOGNAME +"Aligning Poll button");
				return MainToolbar.ALIGN_RIGHT;
			}
		]]>
	</mx:Script>
</mx:Button>    
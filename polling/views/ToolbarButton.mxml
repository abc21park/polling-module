<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $



-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"	
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.polling.toolTip')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent"
	initialize="init()" 
	click="createAndShow();"
	rollOver="listUpdate();"
	icon="{pollIcon}" 
	>
	<mx:Script>
		<![CDATA[
		    import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
	       	import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
			import org.bigbluebutton.modules.polling.events.PollGetTitlesEvent;
			import org.bigbluebutton.modules.polling.events.PollGetStatusEvent;
			
			import org.bigbluebutton.modules.polling.model.ToolbarPollingRenderer;
			import org.bigbluebutton.modules.polling.model.ValueObject;
			import org.bigbluebutton.modules.polling.model.PollObject;
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			
			import org.bigbluebutton.modules.polling.model.PollObject;
			
			private var images:Images = new Images();
			
			[Bindable] public var pollIcon:Class = images.pollIcon;
			[Bindable] private var myMenuData:ArrayCollection = new ArrayCollection();
			
			public static const LOGNAME:String = "[Polling (views) : ToolbarButton] ";
			
			[Bindable] public var titleList:Array;
			[Bindable] public var statusList:Array;
			[Bindable] public var pollList:Array;
			
			private function createAndShow():void{
				LogUtil.debug(LOGNAME +"Toolbar Polling Button Clicked");
				
				listUpdate();
				
				var myMenu:Menu = Menu.createMenu(null, myMenuData, false);
				myMenu.itemRenderer = new ClassFactory(ToolbarPollingRenderer);
				
            	myMenu.show(this.x + 10, this.y + this.height + 10);
            	
            	myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuEventTest);    
        		LogUtil.debug(LOGNAME +"Survived CreateandShow");
			}
			
			private function refreshMenu():void{
				LogUtil.debug(LOGNAME +" About to populate menu; titleList is " + titleList);
				var counter:int = 0;
				for each (var s:String in titleList){
					LogUtil.debug(LOGNAME +"Counter is " + counter);
					var unique:Boolean = true;
					for (var i:int=0; i < myMenuData.length; i++){
						if (myMenuData.getItemAt(i).label == s){
							unique = false;
						}
					}
					if (unique){
						LogUtil.debug(LOGNAME +"Adding title: " + s)
						myMenuData.addItem(new ValueObject(counter.toString(), s));
						LogUtil.debug(LOGNAME +"Status for poll: " + s + " is: " + statusList[counter].toString())
					}
					++counter;
				}
				LogUtil.debug(LOGNAME +"Survived menudata.additem");
			}
			
			// These two events trigger an update of the titleList and the parallel statusList
			private function getTitleList():void{
				dispatchEvent(new PollGetTitlesEvent(PollGetTitlesEvent.UPDATE));
			}
			private function getStatusList():void{
				dispatchEvent(new PollGetStatusEvent(PollGetStatusEvent.UPDATE));
			}
			
			public function listUpdate():void{
				LogUtil.debug(LOGNAME +"Entering listUpdate");
				getTitleList();
				getStatusList();
				refreshMenu();
				LogUtil.debug(LOGNAME +"Survived listUpdate");
			}
			
        	private function menuEventTest(event:MenuEvent):void {
            	LogUtil.debug("event.type: " + event.type);
            	LogUtil.debug("event.label: " + event.label);	
            	LogUtil.debug("event.index: " + event.index);
            	
            	if(event.index == 0){
            	  openPollingInstructions();
            	}
        	}
			
			public function init():void {
				LogUtil.debug(LOGNAME +"Entering function init()");
				myMenuData.addItem(new ValueObject("create", "Create New Poll"));         	
            }			
								
			public function getAlignment():String{
				LogUtil.debug(LOGNAME +"Aligning Poll button");
				return MainToolbar.ALIGN_RIGHT;
			}
			
			
			private function openPollingInstructions():void {
				LogUtil.debug(LOGNAME +"openPollingInstructions() - clicked icon");
				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.OPEN));
				this.enabled=false;
				}
		]]>
	</mx:Script>
</mx:Button>    
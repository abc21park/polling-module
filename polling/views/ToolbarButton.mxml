<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $



-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"	
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.polling.toolTip')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent"
	initialize="init()" 
	click="createAndShow();"
	rollOver="listUpdate();"
	rollOut="getPollList();"
	icon="{pollIcon}" 
	>
	<mx:Script>
		<![CDATA[
		    import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
	       	import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
			import org.bigbluebutton.modules.polling.events.PollGetTitlesEvent;
			import org.bigbluebutton.modules.polling.events.PollGetStatusEvent;
			import org.bigbluebutton.modules.polling.events.PollGetPollEvent;
			import org.bigbluebutton.modules.polling.events.OpenSavedPollEvent;
			import org.bigbluebutton.modules.polling.events.ReviewResultsEvent;
			
			import org.bigbluebutton.modules.polling.model.ToolbarPollingRenderer;
			import org.bigbluebutton.modules.polling.model.ValueObject;
			import org.bigbluebutton.modules.polling.model.PollObject;
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			
			import org.bigbluebutton.modules.polling.model.PollObject;
			
			private var images:Images = new Images();
			
			[Bindable] public var pollIcon:Class = images.pollIcon;
			[Bindable] public var OpenIcon:Class = images.pollIcon;
			[Bindable] private var myMenuData:ArrayCollection = new ArrayCollection();
			
			/*
			[Bindable] 
			[Embed(source="/home/firstuser/dev/source/bigbluebutton/bigbluebutton-client/bin/org/bigbluebutton/common/assets/images/poll_icon.png")] 
			public var openIcon:Class;
			*/
			
			/*
			[Bindable] 
			[Embed(source="../../../common/assets/images/poll_icon.png")] 
			public var OpenIcon:Class;			
			*/
			
			public static const LOGNAME:String = "[Polling (views) : ToolbarButton] ";
			
			[Bindable] public var roomID:String;
			[Bindable] public var titleList:Array;
			[Bindable] public var statusList:Array;
			[Bindable] public var pollList:ArrayCollection;
			
			// #################################################################
			public function init():void {
				LogUtil.debug(LOGNAME +"Entering function init()");
								
				// Functional line:
				myMenuData.addItem(new ValueObject("create", "Create New Poll"));
				
				// Experiments:
				// Syntax error: myMenuData.addItem(new ValueObject("create", "Create New Poll (straight)", OpenIcon));
				// Syntax error: myMenuData.addItem(new ValueObject("create", "Create New Poll (braces)", {OpenIcon}));
				// Syntax error: myMenuData.addItem(new ValueObject("create", "Create New Poll (at-sign)", @OpenIcon));
				
				/*
				myMenuData.addItem(new ValueObject("create", "Create New Poll (toString)", OpenIcon.toString()));
				myMenuData.addItem(new ValueObject("create", "Create New Poll (quotes)", "OpenIcon"));
				myMenuData.addItem(new ValueObject("create", "Create New Poll (braces, quotes)", "{OpenIcon}"));
				myMenuData.addItem(new ValueObject("create", "Create New Poll (at-sign, quotes)", "@OpenIcon"));
				*/
				
				pollList = new ArrayCollection();         	
            }
			
			private function createAndShow():void{
				LogUtil.debug(LOGNAME +"Toolbar Polling Button Clicked");
				
				listUpdate();
				
				var myMenu:Menu = Menu.createMenu(null, myMenuData, false);
				myMenu.iconField="@icon";
				//myMenu.itemRenderer = new ClassFactory(ToolbarPollingRenderer);
            	myMenu.show(this.x + 10, this.y + this.height + 10);
            	
            	myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClick);    
        		LogUtil.debug(LOGNAME +"Survived CreateandShow");
			}
			// #################################################################
			
			private function refreshMenu():void{
				LogUtil.debug(LOGNAME +" About to populate menu; titleList is " + titleList);
				LogUtil.debug(LOGNAME +" About to populate menu; statusList is " + statusList);
				LogUtil.debug(LOGNAME +" About to populate menu; pollList.length is " + pollList.length);
				var counter:int = 0;
				for each (var s:String in titleList){
					++counter;
					LogUtil.debug(LOGNAME +"Counter is " + counter);
					var unique:Boolean = true;
					
					for (var i:int=0; i < myMenuData.length; i++){
						if (myMenuData.getItemAt(i).label == s){
							unique = false;
						}
					}
					if (unique && (s != null)){
						LogUtil.debug(LOGNAME +"Adding title: " + s)
						myMenuData.addItem(new ValueObject(counter.toString(), s, "{pollIcon}"));
						LogUtil.debug(LOGNAME +"Status for poll: " + s + " is: " + statusList[counter-1].toString())
					}
				}
				LogUtil.debug(LOGNAME +"Survived menudata.additem");
			}
			
			public function getPollList():void{
				LogUtil.debug(LOGNAME +"Entering getPollList() on rollOut");
				
				//LogUtil.debug(LOGNAME +"About to loop through myMenuData to start getPollList, length is " + myMenuData.length);
				for (var i:int = 1; i < myMenuData.length; i++){
					LogUtil.debug(LOGNAME +"In for-loop");
					var key:String = roomID + "-" + myMenuData.getItemAt(i).label;
					LogUtil.debug(LOGNAME +"Survived key generation");
					myMenuData.getItemAt(i).pollKey = key; 
					LogUtil.debug(LOGNAME +"Going to get poll with key " + myMenuData.getItemAt(i).pollKey);
					var pollEvent:PollGetPollEvent = new PollGetPollEvent(PollGetPollEvent.GET);
					pollEvent.pollKey = key;
					dispatchEvent(pollEvent);
				}
				
				// It keeps re-adding items that are already there
				LogUtil.debug(LOGNAME +"For-loop in ToolbarButton");
				for (var n:int = 0; n < pollList.length; n++){
					LogUtil.debug(LOGNAME +"PollList["+n+"] is: " + pollList[n]);
					LogUtil.debug(LOGNAME +"PollList["+n+"] has title: " + pollList[n].title);
				}
				LogUtil.debug(LOGNAME +"Leaving getPollList() after rollOut");
			}
			
			// These two events trigger an update of the titleList and the parallel statusList
			private function getTitleList():void{
				dispatchEvent(new PollGetTitlesEvent(PollGetTitlesEvent.UPDATE));
			}
			private function getStatusList():void{
				dispatchEvent(new PollGetStatusEvent(PollGetStatusEvent.UPDATE));
			}
			
			public function listUpdate():void{
				LogUtil.debug(LOGNAME +"Entering listUpdate");
				getTitleList();
				getStatusList();
				//getPollList();
				refreshMenu();
				LogUtil.debug(LOGNAME +"Survived listUpdate");
			}
			
        	private function menuClick(event:MenuEvent):void {
            	/*
            	LogUtil.debug("event.type: " + event.type);
            	LogUtil.debug("event.label: " + event.label);	
            	LogUtil.debug("event.index: " + event.index);
            	*/
            	LogUtil.debug("You've clicked a menu item");
            	if(event.index == 0){
            		LogUtil.debug("Opening new poll");
            	  	openPollingInstructions();
            	}else{
            		LogUtil.debug("Checking menu item at: " + event.index);
            		//pollList[event.index-1].checkObject();
            		
            		var poll:PollObject = pollList[event.index-1];
            		
            		//poll.checkObject();

            		if (poll.status){
            			// Poll has not been used yet, open instructions window
            			var openPollEvent:OpenSavedPollEvent = new OpenSavedPollEvent(OpenSavedPollEvent.OPEN);
            			openPollEvent.poll = poll;
            			LogUtil.debug("Checking poll progress at the beginning of the path: ");
            			//poll.checkObject();
            			//openPollEvent.poll.checkObject();
            			dispatchEvent(openPollEvent);
            		}else{
            			// Poll has been closed, show results
            			// Try doing something similar to what you did to the Instructions window
            			LogUtil.debug("You have selected a poll that was already published.");
            			poll.checkObject();
            			var reviewEvent:ReviewResultsEvent = new ReviewResultsEvent(ReviewResultsEvent.REVIEW);
            			reviewEvent.poll = poll;
            			dispatchEvent(reviewEvent);
            		}
            	}
        	}
						
								
			public function getAlignment():String{
				LogUtil.debug(LOGNAME +"Aligning Poll button");
				return MainToolbar.ALIGN_RIGHT;
			}
			
			
			private function openPollingInstructions():void {
				LogUtil.debug(LOGNAME +"openPollingInstructions() - clicked icon");
				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.OPEN));
				this.enabled=false;
			}
		]]>
	</mx:Script>
</mx:Button>    
<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $



-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"	
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.polling.toolTip')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent"
	initialize="init();" 
	click="createAndShow();"
	rollOver="updateMenu();"
	icon="{pollIcon}" 
	>
	<mx:Script>
		<![CDATA[
			// The Button calls "init()" on both initialize and rollOver to 
		    import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.util.i18n.ResourceUtil;
	       	import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent;
			import org.bigbluebutton.modules.polling.events.PollGetTitlesEvent;
			import org.bigbluebutton.modules.polling.events.PollGetStatusEvent;
			import org.bigbluebutton.modules.polling.events.PollGetPollEvent;
			import org.bigbluebutton.modules.polling.events.OpenSavedPollEvent;
			import org.bigbluebutton.modules.polling.events.ReviewResultsEvent;
			
			import org.bigbluebutton.modules.polling.model.ToolbarPollingRenderer;
			import org.bigbluebutton.modules.polling.model.ValueObject;
			import org.bigbluebutton.modules.polling.model.PollObject;
			
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.events.MenuEvent;
			
			import org.bigbluebutton.modules.polling.model.PollObject;
			
			private var images:Images = new Images();
			
			[Bindable] public var pollIcon:Class = images.pollIcon;
			[Bindable] private var myMenuData:ArrayCollection;
			
			
			[Bindable] 
			[Embed(source="../../../common/assets/images/poll_icon.png")]  
			public var OpenIcon:Class;			
			
						
			public static const LOGNAME:String = "[Polling (views) : ToolbarButton] ";
			
			[Bindable] public var roomID:String;
			[Bindable] public var titleList:Array;
			[Bindable] public var pollList:ArrayCollection;
			
			// #################################################################
			public function init():void {
				// LogUtil.debug(LOGNAME +"Entering function init()");	
				myMenuData = new ArrayCollection();
				pollList = new ArrayCollection();			
				listInitialize();
				renderMenu();
            }
			
			private function createAndShow():void{
				// LogUtil.debug(LOGNAME +"Toolbar Polling Button Clicked, titleList is: " + titleList);
				renderMenu();
				
				var myMenu:Menu = Menu.createMenu(null, myMenuData, false);
				
				myMenu.iconField="icon";
				myMenu.show(this.x + 10, this.y + this.height + 10);
            	
            	myMenu.addEventListener(MenuEvent.ITEM_CLICK, menuClick);
            	  
        		// LogUtil.debug(LOGNAME +"Survived CreateandShow");
			}
			// #################################################################

			public function listInitialize():void{
				// LogUtil.debug(LOGNAME +"Entering listInitialize");
				titleList = new Array();
				myMenuData.removeAll();
				pollList.removeAll();
				dispatchEvent(new PollGetTitlesEvent(PollGetTitlesEvent.INIT));
				// After this, we have the list of all titles (which should already be unique) which correspond to our room and pollList
				// should have all of the available polls, which won't contain duplicates because Redis won't allow them
				// LogUtil.debug(LOGNAME +"Survived listInitialize, titleList is: " + titleList);
			}
						
			private function renderMenu():void{
				// LogUtil.debug(LOGNAME +"Entering RenderMenu, titleList is: " + titleList);
				myMenuData.removeAll();
				myMenuData.addItem(new ValueObject("create", ResourceUtil.getInstance().getString('bbb.polling.menu.createNewPoll')));
				
				for (var i:int = 0; i < pollList.length; i++){
					if (pollList[i] != null){
						var keyString:String = pollList[i].room +"-"+ pollList[i].title;
						var menuEntry:ValueObject = new ValueObject(keyString, pollList[i].title);
						menuEntry.poll = pollList[i];
						if (!pollList[i].status){
							menuEntry.label = "X-" + menuEntry.label;
						}else{
							menuEntry.icon = "OpenIcon";
						}
						myMenuData.addItem(menuEntry);
					}
				}
				// LogUtil.debug(LOGNAME +"Survived renderMenu");
			}
			
			private function updateMenu():void{
				// LogUtil.debug(LOGNAME +"Entering UpdateMenu");
				listInitialize();
				// LogUtil.debug(LOGNAME +"Survived UpdateMenu");
			}
			
        	private function menuClick(event:MenuEvent):void {            	
            	// LogUtil.debug("You've clicked a menu item");
            	if(event.index == 0){
            		LogUtil.debug("Opening new poll");
            	  	openPollingInstructions();
            	}else{
            		// LogUtil.debug("Checking menu item at: " + event.index);
            		var poll:PollObject = myMenuData.getItemAt(event.index).poll;
            		// poll.checkObject();
            		if (poll.status){
            			// Poll has not been used yet, open instructions window
            			var openPollEvent:OpenSavedPollEvent = new OpenSavedPollEvent(OpenSavedPollEvent.OPEN);
            			openPollEvent.poll = poll;
            			// LogUtil.debug("Checking poll progress at the beginning of the path");
            			//poll.checkObject();
            			//openPollEvent.poll.checkObject();
            			dispatchEvent(openPollEvent);
            		}else{
            			// Poll has been closed, show results
            			// LogUtil.debug("You have selected a poll that was already published.");
            			// poll.checkObject();
            			var reviewEvent:ReviewResultsEvent = new ReviewResultsEvent(ReviewResultsEvent.REVIEW);
            			reviewEvent.poll = poll;
            			dispatchEvent(reviewEvent);
            		}
            	} // _ if index==0
        	}
						
								
			public function getAlignment():String{
				return MainToolbar.ALIGN_RIGHT;
			}
			
			
			private function openPollingInstructions():void {
				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.OPEN));
				this.enabled=false;
			}
		]]>
	</mx:Script>
</mx:Button>    
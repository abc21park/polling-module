<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<!--
Notes.mxml is the main view of the SharedNotes application
-->
<MDIWindow xmlns="flexlib.mdi.containers.*"
        xmlns:mx="http://www.adobe.com/2006/mxml"
	width="450" height="580" 
	xmlns:mate="http://mate.asfusion.com/" 
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	creationComplete="onCreationComplete()"
	label="Create New Poll" layout="absolute" 
	title="Create New Poll">
	
	<!-- Pre Defined Validation -->
	
	
	
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.bigbluebutton.main.views.MainCanvas;
			import mx.controls.Alert;
			import org.bigbluebutton.common.LogUtil;
			import mx.validators.Validator;	
			
			//EVENTS
			import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent; 
			import org.bigbluebutton.modules.polling.events.StartPollingEvent;
			import org.bigbluebutton.modules.polling.events.AcceptPollingInstructionsWindowEvent;

		
			public static const LOGNAME:String = "[PollingInstructionsWindow] ";	

			public var moduleAttributes:Object;
			private var userName:String;
			private var _answers:Array;
			private var _title:String;
			private var _question:String;
			private var _isMultiple:uint;
			private var allowedChars:RegExp = /^[^;\\]*$/; // for security reasons some  characters are not allowed
		
			
			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
 
			private function onCreationComplete():void{
				LogUtil.debug(LOGNAME + "Inside Creation Complete");
				LogUtil.debug(LOGNAME + "Instructions Window is Created");
				userName = moduleAttributes.username;
			}
			
			
			override public function close(event:MouseEvent = null):void {
				closeInstructionsWindow();
			}		
			
			private function isMultiple(multiple:uint=0):void{
				_isMultiple=multiple;
			}
			
			private function closeInstructionsWindow():void {	
				LogUtil.debug(LOGNAME + "inside  closeinstructionsWindow");		

				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.CLOSE));				
			}		
			
			private function openAcceptInstructions():void {
				LogUtil.debug(LOGNAME + "inside  acceptInstructions");		
				dispatchEvent(new AcceptPollingInstructionsWindowEvent(AcceptPollingInstructionsWindowEvent.OPEN));
				closeInstructionsWindow()
			titleErrMsg.text="";
			}
			

			private function StartPolling():void {
				LogUtil.debug(LOGNAME + "inside  StartPolling calling StartPollingEvent ");		
				dispatchEvent(new StartPollingEvent(StartPollingEvent.START));
				closeInstructionsWindow();
			}
			
			private function sendToReview(_asnwers:Array,_title:String,_question:String):void{
				LogUtil.debug(LOGNAME + "WHAT WE HAVE:");
				LogUtil.debug(LOGNAME + "Title: "+_title);
				LogUtil.debug(LOGNAME + "Question: "+_question);
				LogUtil.debug(LOGNAME + "Answers: "+_answers);
				if(_isMultiple)LogUtil.debug(LOGNAME + "Multiple answers allowed");
			
			}
			
			// DATA VALIDATION
			//##################################################################################
			private function validateAndSubmit():void {
			  var valid:Boolean = true;
			  
			  // Gathering Error Messages
				titleErrMsg.text = titleError();
				qErrMsg.text = questionError();
				aErrMsg.text = answerError();
				
			// Making Error messages Visible if there is an Error
			
			    if (titleErrMsg.text != "VALID"){ // checking if function returned any error string
			     	titleErrMsg.visible=true;
			     	valid = false;	// setting flag to false in case of error
			    }else 
			       titleErrMsg.visible=false;
			   
			   
			    if(qErrMsg.text != "VALID"){
			    	qErrMsg.visible=true;
			    	valid = false;	
			    } else 
			        qErrMsg.visible=false;
			    
			    
			    if (aErrMsg.text != "VALID") {
			    	aErrMsg.visible=true;
			    	valid = false;	
			    }else 
			        aErrMsg.visible=false;
			   
			    if(valid){
			    	StartPolling();
			    	sendToReview(_answers,_title,_question);
			    }
			
			
			}
			
			// GENERATING ERROR MESSAGES
			//################################
			//TITLE VALIDATION
			private function   titleError():String{
			
			   var errMsg:String = "VALID";

			     if (pollTitle.length == 0 )
			     		errMsg = "Please Provide a Title";
			       else if(!allowedChars.test(pollTitle.text))
			   		errMsg = "Title has forbidden characters";
			   		else
			   			_title = pollTitle.text;			
			  return errMsg;
			}
			
			//QUESTION VALIDATION
			private function   questionError():String{
			
			   var errMsg:String = "VALID";
			     if (pollQuestion.length == 0 )
			     		errMsg = "Please Provide a Question";
			       else if(!allowedChars.test(pollQuestion.text))
			   		errMsg = "Question field has forbidden characters";	
			   	   else
			   	   	_question=pollQuestion.text;			
			  return errMsg;
			}
			
			
			
			// ANSWER VALIDATION
			private function   answerError():String{
			
			   var errMsg:String = "VALID";
			   var startWithStar:RegExp = /^[*]/; // should start with *
			   var answersArray:Array; 
		     
		     		answersArray = pollAnswers.text.split("\r*"); // splitting by '*' and new line, thus user can type '*' anywhere except the newline
		     		answersArray[0] = answersArray[0].split('*').join(''); // As after split '*' is not displayed we need to  take off from first element which is not splitted
		     		//LogUtil.debug("so last element of array is " +answersArray[answersArray.length-1]);
			   	//LogUtil.debug("array length is: " + answersArray.length);	
		     
			     if (pollAnswers.length == 0 )
			     		errMsg = "Please provide at least 2 Answers";
			       else if(!allowedChars.test(pollAnswers.text))
			   		errMsg = "Answer field has forbidden characters";
			   	 else if (!startWithStar.test(pollAnswers.text)){
			   	 	errMsg = "Every asnwer should start with  a new line and '*' (e.g *Seneca)";
			   	 	}
			   	 	else if(answersArray.length < 2){
			   	 	  errMsg = "Please provide at least 2 Answers start each with new line and *";
			   	 	}else {
			   	 	
			   	 		// If user just put '*' without any answer we need to remove this element from array
			   	  
			   			 for (var i:int=0; i< answersArray.length; i++){
			   	 			//	LogUtil.debug("inside array element [" +i+"] is " +answersArray[i]);
			   	 		    if(i != 0 && (answersArray[i] == null || answersArray[i] == "")){
			   	 								    	answersArray.splice(i,1);
			   	 				  //  	LogUtil.debug("deleting element " + i + "because it is empty");
			   	 		    }
			   	 		}	
			   	 		_answers = answersArray;
			   	 		//TESTING TO BE DELETED WHEN WORKS
			   	 		//LogUtil.debug("New length after deleting is:" + _answers.length);
			   	 
			   	 		for (var b:int=0; b< _answers.length; b++){
			   	 		LogUtil.debug("global element [" +b+"] is " +_answers[b]);
			   	 		}  	 		
			   	 	}	
			   	 				
			  	return errMsg;
			}
		//#####################################################################################################	
		
			
		]]>
	</mx:Script>
	<!-- Prorotype of Polling Instructions Design -->

	
       
           <mx:VBox width="90%" height="90%"  >
            <mx:Form width="90%"  id="instructionsForm" paddingLeft="10" paddingRight="10" paddingTop="30" paddingBottom="10">
           
            
	      <mx:FormItem fontWeight="bold"   label="Title :" paddingLeft="35" required="true" >
		<mx:TextInput id="pollTitle" /> 
		<mx:Label id="titleErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal"/> 
	      </mx:FormItem>
		
	      <mx:FormItem  fontWeight="bold" label="Question :" paddingLeft="35"  paddingTop="20"  >
		<mx:TextArea id="pollQuestion" width="200" height="100" /> 
		<mx:Label id="qErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal" /> 
	     </mx:FormItem>
	     
	      <mx:FormItem  fontWeight="bold" label="Answers :" paddingLeft="35"  paddingTop="30"  >
		<mx:TextArea id="pollAnswers" width="200" height="100" /> 
	     </mx:FormItem>
	     
	     <mx:FormItem  fontWeight="bold"  paddingLeft="20"  paddingTop="5"  >
	     	<mx:Label id="aErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal" /> 
	     </mx:FormItem>
	     
	     
	      <mx:FormItem  paddingLeft="10"  paddingTop="20" >
	         <mx:CheckBox id="multiple_response" label="Allow users to choose more than one response" click="isMultiple(1)" />
	      </mx:FormItem>
	   
	 
	    </mx:Form> 
	   </mx:VBox>
	   
	   <!-- BUTTONS -->
	   <mx:ControlBar width="100%" >
		<mx:HBox paddingLeft="70" paddingRight="10" paddingTop="10" paddingBottom="10">  
       			<mx:Button id="CreatePoll" label="Create Poll" click="validateAndSubmit()"  width="100" height="30"/>
			<mx:Button id="Cancell" label="Cancel" click="closeInstructionsWindow()"  width="100" height="30"/>
		</mx:HBox>	 
	   </mx:ControlBar> 	 
	   <!-- END OF BUTTONS -->
	     

</MDIWindow>

<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<!--
Notes.mxml is the main view of the SharedNotes application
-->
<MDIWindow xmlns="flexlib.mdi.containers.*"
        xmlns:mx="http://www.adobe.com/2006/mxml"
	width="450" height="580" 
	xmlns:mate="http://mate.asfusion.com/" 
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	creationComplete="onCreationComplete()"
	label="Create Poll" layout="absolute" 
	title="Create Poll">
	
	<!-- Pre Defined Validation -->
	
	
	
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import org.bigbluebutton.main.views.MainCanvas;
			import mx.controls.Alert;
			import org.bigbluebutton.common.LogUtil;
			import mx.validators.Validator;	
			
			import mx.collections.ArrayCollection;


		
			//EVENTS
			import org.bigbluebutton.modules.polling.events.PollingInstructionsWindowEvent; 
			import org.bigbluebutton.modules.polling.events.StartPollingEvent;
			import org.bigbluebutton.modules.polling.events.AcceptPollingInstructionsWindowEvent;
			
			

		
			public static const LOGNAME:String = "[PollingInstructionsWindow] ";	
			public var moduleAttributes:Object;
			private var userName:String;
			private var allowedChars:RegExp = /^[^;\\]*$/; // for security reasons some  characters are not allowed
			
			// Bindable is set to allow data to change when You hit Back and change something, this change will appear in review
			[Bindable]private var _title:String;
			[Bindable]private var _question:String;
			[Bindable]private var _answers:ArrayCollection;
			[Bindable]private var _isMultiple:Boolean =false;
			
			
			
			
			
			// LENGTH CONSTRAINTS ( CHANGE IF YOU NEED)
			//################################################
			[Bindable]private var _MAX_QUESTION_LENGTH:uint = 200;
			[Bindable]private var _MAX_TITLE_LENGTH:uint=50;
			[Bindable]private var _MAX_ANSWER_LENGTH:uint = 100;
			[Bindable]private var _MAX_ANSWERS_AMOUNT:uint = 10;
			[Bindable]private var _ANSWER_CHARS_PER_LINE:uint=28; // made to avoid scrollbars (can be changed )
			//################################################
			
			
			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
			

 
			private function onCreationComplete():void{
				LogUtil.debug(LOGNAME + "Inside Creation Complete");
				LogUtil.debug(LOGNAME + "Instructions Window is Created");
				userName = moduleAttributes.username;
			}
			
			// Overwritting close to use custom function
			override public function close(event:MouseEvent = null):void {
				closeInstructionsWindow();
			}
			// function invoked when close window
			private function closeInstructionsWindow():void {	
				LogUtil.debug(LOGNAME + "inside  closeinstructionsWindow");		

				dispatchEvent(new PollingInstructionsWindowEvent(PollingInstructionsWindowEvent.CLOSE));				
			}			
			// function invoked when checkbox is checked
			private function isMultiple():void{
			
			     if(multiple_response.selected == true)
				    _isMultiple= true;
			        else 	
					_isMultiple= false;
			}
			
				
			private function openAcceptInstructions():void {
				LogUtil.debug(LOGNAME + "inside  acceptInstructions");		
				dispatchEvent(new AcceptPollingInstructionsWindowEvent(AcceptPollingInstructionsWindowEvent.OPEN));
				closeInstructionsWindow()
			titleErrMsg.text="";
			}
			

			private function StartPolling():void {
				LogUtil.debug(LOGNAME + "inside  StartPolling calling StartPollingEvent ");		
				dispatchEvent(new StartPollingEvent(StartPollingEvent.START));
				closeInstructionsWindow();
			}
			
	
			private function reviewChanges():void{
				LogUtil.debug(LOGNAME + "WHAT WE HAVE:");
				LogUtil.debug(LOGNAME + "Title: "+_title);
				LogUtil.debug(LOGNAME + "Question: "+_question);
				LogUtil.debug(LOGNAME + "Answers: "+_answers);
				if(_isMultiple) LogUtil.debug(LOGNAME + "Multiple answers allowed");
				//dispatchEvent(new AcceptPollingInstructionsWindowEvent(AcceptPollingInstructionsWindowEvent.OPEN));
				
			
			}
			
			// DATA VALIDATION
			//##################################################################################
			
			
			private function validateAndSubmit():void {
			  var valid:Boolean = true;
			  
			  // Gathering Error Messages
				titleErrMsg.text = titleError();
				qErrMsg.text = questionError();
				aErrMsg.text = answerError();
				
			// Making Error messages Visible if there is an Error
			
			    if (titleErrMsg.text != "VALID"){ // checking if function returned any error string
			     	titleErrMsg.visible=true;
			     	valid = false;	// setting flag to false in case of error
			    }else 
			       titleErrMsg.visible=false;
			   
			   
			    if(qErrMsg.text != "VALID"){
			    	qErrMsg.visible=true;
			    	valid = false;	
			    } else 
			        qErrMsg.visible=false;
			    
			    
			    if (aErrMsg.text != "VALID") {
			    	aErrMsg.visible=true;
			    	valid = false;	
			    }else 
			        aErrMsg.visible=false;
			   
			    if(valid){
			    
			    formatAndReview();
			    	
			    }
			
			
			}
			
			// GENERATING ERROR MESSAGES
			//################################
			//TITLE VALIDATION
			private function   titleError():String{
			
			   var errMsg:String = "VALID";

			     if (pollTitle.length == 0 )
			     		errMsg = "Please Provide a Title";
			     	else if (pollTitle.length > _MAX_TITLE_LENGTH )
			     		errMsg = "Title is too long, Max. " +_MAX_TITLE_LENGTH;	
			       		else if(!allowedChars.test(pollTitle.text))
			   			errMsg = "Title has forbidden characters";
			   			else
			   				_title = pollTitle.text;			
			  return errMsg;
			}
			
			//QUESTION VALIDATION
			private function   questionError():String{
			
			   var errMsg:String = "VALID";
			     if (pollQuestion.length == 0 )
			     		errMsg = "Please Provide a Question";
			     	 else if (pollQuestion.length > _MAX_QUESTION_LENGTH )
			     		errMsg = "Question is too long. Maximum chars: "+ _MAX_QUESTION_LENGTH;		
			      		 else if(!allowedChars.test(pollQuestion.text))
			   			errMsg = "Question field has forbidden characters";	
			   	   else	
			   	   	_question=pollQuestion.text;			
			  return errMsg;
			}
			
			
			
			// ANSWER VALIDATION
			private function   answerError():String{
			
			   var errMsg:String = "VALID";
			   var startWithStar:RegExp = /^[*]/; // should start with *
			   var answersArray:Array; 
			   var valid:Boolean=true;
		     
		     		answersArray = pollAnswers.text.split("\r*"); // splitting by '*' and new line, thus user can type '*' anywhere except the newline
		     		answersArray[0] = answersArray[0].split('*').join(''); // As after split '*' is not displayed we need to  take off from first element which is not splitted
		     		//LogUtil.debug("so last element of array is " +answersArray[answersArray.length-1]);
			   	//LogUtil.debug("array length is: " + answersArray.length);	
		     
			     if (pollAnswers.length == 0 )
			     		errMsg = "Please provide at least 2 Answers";
			       else if(!allowedChars.test(pollAnswers.text))
			   		errMsg = "Answer field has forbidden characters";
			   	 else if (!startWithStar.test(pollAnswers.text))
			   	 	errMsg = "Every asnwer should start with  a new line and '*' (e.g *Seneca)";
			   	 	else if(answersArray.length < 2)
			   	 	 	 errMsg = "Please provide at least 2 Answers start each with new line and *";
			   	 	   else if(answersArray.length > _MAX_ANSWERS_AMOUNT)
			   	 	  		errMsg = "You have too many answers. Max, answers allowed: "+_MAX_ANSWERS_AMOUNT;
			   	 		else {
			   	 	
			   	 			
			   	 		// If user just put '*' without any answer we need to remove this element from array
			   	  
			   			 for (var i:int=0; i< answersArray.length; i++){
			   	 			//	LogUtil.debug("inside array element [" +i+"] is " +answersArray[i]);
			   	 		    if(i != 0 && (answersArray[i] == null || answersArray[i] == "")){
			   	 						answersArray.splice(i,1);
			   	 				  //  	LogUtil.debug("deleting element " + i + "because it is empty");
			   	 		    }else if(answersArray[i].length > _MAX_ANSWER_LENGTH){
			   	 		    	errMsg = "Your answers are too long. Max length is "+_MAX_ANSWER_LENGTH+" per answer";
			   	 		    	valid=false;
			   	 		    }
			   	 		    // if last character of the array element is  return (new line), we trim it to have accurate string
			   	 		    
			   	 		
			   	 		    LogUtil.debug("answers array elementr:" + answersArray[i].substring(0,answersArray[i].length-1))

			   	 		    if(answersArray[i].charAt(answersArray[i].length-1) == '\r')
			   	 		    	answersArray[i] = answersArray[i].substring(0,answersArray[i].length-1);
	
			   	 		    
			   	 		    
			   	 		}
			   	 		 if(valid)	
			   	 		 	_answers  = new ArrayCollection(answersArray);	
			   	 	
			   	 		//TESTING TO BE DELETED WHEN WORKS
			   	 		for (var b:int=0; b<  _answers.length; b++){
			   	 		LogUtil.debug("global element [" +b+"] is " + _answers.getItemAt(b));
			   	 		}  	 		
			   	 	}	
			   	 				
			  	return errMsg;
			}
			
			
		//#####################################################################################################	
		
		
		public function goBack():void{

		  	back.visible=false;
		  	options.selected=false;
		}
		
		private function formatAndReview():void{
		
		
			// Change maind window and buttons to Review
			mainArea.selectedChild=review;
			buttons.selectedChild=reviewButtons;
			// Make Back button visible
			back.visible=true;
			//reviewChanges();
			// if Multiple enabled than add check all that apply to string, or if it already added and user desided he don't want multiple than delete it
			    	if(_isMultiple)
			    		_question += "\n (check all that may apply)";
			    	   
			    	   else if(( !_isMultiple && _question.substr(_question.length-28,_question.length) == "\n (check all that may apply)" ))
					           _question.slice(0,_question.length-28);
			    	     
			 // Make Title and Question  string  first letter Upper case
			 
			  _question = upperFirstLetter(_question);
			  _title =   upperFirstLetter(_title);	    
			  
			  
			  // Every answer if it s longer than 28 chars,  new line should be added to the nearest space before 28ts char so answers could look in PreView nice and smooth       
			  
			    
			    }	     	
			    	

		
		
		
		
		
		
		
		private function upperFirstLetter(str:String) : String {
		
 			return str.substr(0, 1).toUpperCase() + str.substr(1, str.length);
		}	
		
		
			
		]]>
	</mx:Script>

          
        
          <mx:ViewStack id="mainArea" width="100%">
          
           <!-- ################### MAIN AREA ##############-->  
           
           <!-- Instructions Window with Form-->
              <mx:Canvas id="instrMain" width="90%" height="90%">
           	<mx:VBox width="90%" height="90%" >
           	
            		<mx:Form width="100%"  id="instructionsForm"  paddingTop="30" paddingBottom="10">
           
	   		   <mx:FormItem fontWeight="bold"   label="Title :" paddingLeft="35" required="true" >
				<mx:TextInput id="pollTitle" /> 
				<mx:Label id="titleErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal"/> 
  		          </mx:FormItem>
		
	      		<mx:FormItem  fontWeight="bold" label="Question :" paddingLeft="35"  paddingTop="20"  >
				<mx:TextArea id="pollQuestion" width="200" height="100" /> 
				<mx:Label id="qErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal" /> 
	     		</mx:FormItem>
	     
	     
	      		<mx:FormItem  fontWeight="bold" label="Answers :" paddingLeft="35"  paddingTop="30"  >
				<mx:TextArea id="pollAnswers" width="200" height="100" /> 
	    		</mx:FormItem>
	     
	     		<mx:FormItem  fontWeight="bold"  paddingLeft="20"  paddingTop="5"  >
	     			<mx:Label id="aErrMsg"  text="" visible="false" width="100%" color="red" fontSize="9" fontWeight="normal" /> 
	     		</mx:FormItem>
	     
	     		 <mx:FormItem  paddingLeft="10"  paddingTop="20" >
	     		    <mx:CheckBox id="multiple_response" label="Allow users to choose more than one response" click="isMultiple()" />
	     		 </mx:FormItem>
	   
	   	  </mx:Form>   
	  	</mx:VBox>
	    </mx:Canvas>
	    
	     <!-- Review Window that is invoked when Next button is clicked -->
	    <mx:Canvas id="review">
          		 <mx:VBox width="90%" height="90%"  paddingLeft="40">
          		 	
          		 	<mx:Label   text="Here is you Poll:" fontSize="11" fontWeight="bold" width ="100%" paddingTop="60" paddingLeft="20" paddingBottom="20"/> 
          		 	<mx:Panel id="titleShow"  title="{_title}" width="90%"  >
          		 	
          		 	
          		 	 <mx:VBox paddingLeft="40" paddingBottom="40">
          		 			<mx:Text   text="{_question}" fontSize="10" fontWeight="bold"  paddingBottom="20" paddingTop="20"  width="{_MAX_QUESTION_LENGTH}"/> 
          		 			
          		 			
          		 		<mx:HBox>
          		 			 <mx:RadioButton groupName="options"  id="a1" label="*" />
       						 <mx:Text text="{ _answers.getItemAt(0)}" width="200" />	 
       					</mx:HBox>
       					<mx:HBox>	 
    							<mx:RadioButton groupName="options" id="a2" label="*" />
        						<mx:Text text="{ _answers.getItemAt(1)}" width="200"/>		
        				</mx:HBox>
          		 	</mx:VBox>
          		 	</mx:Panel> 
          		 	
          		 	<mx:Label   text="  if you want to make any changes click 'Back' button" 
          		 		    fontSize="11" 
          		 		    fontWeight="normal" width ="100%"  
          		 		    paddingLeft="20" paddingBottom="20" paddingTop="20"
          		 		    /> 				
          		 	
	   		</mx:VBox>
	    </mx:Canvas>
	    </mx:ViewStack>	
	  
	   <!-- ###################BUTTONS##############-->  
	   <!-- area where buttons are located -->
	   <mx:ControlBar x="60" y="460"  >
		<mx:HBox paddingLeft="40" paddingRight="10" paddingTop="10" paddingBottom="10"> 
		<!-- Back Button is not visible while instructions and visible while preView -->
		 <mx:Button id="back" label="Back" click="{mainArea.selectedChild=instrMain} {buttons.selectedChild=instrButtons} goBack()"  width="100" height="30" visible="false"/>
		 <mx:ViewStack id="buttons">
		 
		   <!--buttons that appear when Instructions is displayed -->
		    <mx:Canvas id="instrButtons">
			<mx:Button id="next" label="Next" click="validateAndSubmit()"  width="100" height="30"/>	
		   </mx:Canvas>
		   <!-- buttons that appear on Review  -->
		   <mx:Canvas id="reviewButtons">
			<mx:Button id="SavePoll" label="SavePoll" click="StartPolling()"  width="100" height="30"/>
		   </mx:Canvas>	
		   </mx:ViewStack>
		    <!-- Cancel button appear everywhere -->
		    <mx:Button id="Cancel" label="Cancel" click="closeInstructionsWindow()"  width="100" height="30"/>
		    
		   
		   
		</mx:HBox>	 
	   </mx:ControlBar> 

</MDIWindow>

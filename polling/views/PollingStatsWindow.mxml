<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<MDIWindow xmlns="flexlib.mdi.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="380" height="150" 
	xmlns:mate="http://mate.asfusion.com/" 
	implements="org.bigbluebutton.common.IBbbModuleWindow" 
	creationComplete="onCreationComplete()"
	label="Polling" layout="absolute" 
	title="{ResourceUtil.getInstance().getString('bbb.polling.stats.title')}">

	<mx:Script>
		<![CDATA[
		import flexlib.mdi.events.MDIWindowEvent;
			
			import org.bigbluebutton.main.views.MainCanvas;
			import mx.controls.Alert;
			import org.bigbluebutton.common.LogUtil;	 
			import org.bigbluebutton.modules.polling.events.StartPollingEvent;
			import org.bigbluebutton.modules.polling.managers.PollingManager;
			import org.bigbluebutton.modules.polling.events.VoteEvent;
			import org.bigbluebutton.modules.polling.events.PollingStatsWindowEvent;
			import org.bigbluebutton.modules.polling.events.PollRefreshEvent;
			import org.bigbluebutton.modules.polling.events.StopPollEvent;
			import org.bigbluebutton.modules.polling.events.SavePollEvent;
			import org.bigbluebutton.modules.polling.events.PublishPollEvent;
			import org.bigbluebutton.modules.polling.events.GenerateWebKeyEvent;
			
			import org.bigbluebutton.modules.polling.model.PollObject;
			
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.model.users.Conference 
			import org.bigbluebutton.main.model.users.BBBUser;
			import org.bigbluebutton.common.Role;

			import mx.validators.Validator;	
			import mx.utils.ObjectUtil;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			import mx.collections.ArrayCollection;
			import mx.core.IUIComponent;
			import mx.controls.Text;
			import mx.controls.TextArea;
		    import mx.containers.*;
		    import mx.controls.*;


			import org.bigbluebutton.util.i18n.ResourceUtil;
		   	public static const LOGNAME:String = "[PollingStatsWindow] ";

			[Bindable] public var question:String;
			[Bindable] public var answers:Array;
 			
			[Bindable] public var trackingPoll:PollObject;
			public var viewingClosedPoll:Boolean = false;
			
			//[Bindable] public var participants:int;
			
			public var moduleAttributes:Object;
			private var _userid:Number; 
			private var window:PollingStatsWindow;
			private var conference:Conference;

			private function onCreationComplete():void{
				//LogUtil.debug(LOGNAME + "Stats window has been built, trackingPoll is: ");
				trackingPoll.checkObject();
				conference = UserManager.getInstance().getConference();
				// If the statistics window is being opened to view a poll that has been published and closed, the interface will 
				// immediately appear with only the option to close the window. 
				if(viewingClosedPoll)
					stopPoll();
				
				if (trackingPoll.publishToWeb){
					//LogUtil.debug("About to try and use webKey, value is: " + trackingPoll.webKey);
					webPollURLBox.text = trackingPoll.webKey;
				}
				
				answers = trackingPoll.answers;
				question = trackingPoll.question;
								
				var lines:int = (question.length / 28) + 1;
			//	LogUtil.debug(LOGNAME + "Stats window question is: " + question);
			//	LogUtil.debug(LOGNAME + "Stats window answers are: " + answers);
			//	LogUtil.debug(LOGNAME + "Stats window answers.length is: " + answers.length);
				for(var s:String in answers){
					lines = lines + ((s.length / 28) + 1);
				//	LogUtil.debug(LOGNAME + "Inside for-loop, lines is: " + lines);	
				}				 	            	
				height = height + ((lines+1) * 45);
			//	LogUtil.debug(LOGNAME + "After for-loop, lines is: " + lines + " and height is " + height);
				
			//	LogUtil.debug(LOGNAME+"About to draw the results table");
				createResultsTable(answers.length, answers);
			}			

			public function getPrefferedPosition():String{
				return MainCanvas.POPUP;
			}
				
			private function refreshResults():void{
				//LogUtil.debug(LOGNAME + "Result of getMeetingInfo is " + getMeetingInfo());
			
				var e:PollRefreshEvent = new PollRefreshEvent(PollRefreshEvent.GET);
				e.poll.title = trackingPoll.title;
				dispatchEvent(e);
			} // end of function refreshResults
						
			private function closeWindow():void{
			//	LogUtil.debug(LOGNAME + "inside closeWindow()");
				dispatchEvent(new PollingStatsWindowEvent(PollingStatsWindowEvent.CLOSE));
			}
 
 			public function refresh(newVotes:Array, totalVotes:int, noVoteYet:int):void{
 				trackingPoll.votes = newVotes;
 				trackingPoll.totalVotes = totalVotes;
 				trackingPoll.didNotVote = noVoteYet;
 				//LogUtil.debug(LOGNAME + "After refresh event SHOULD have been triggered, checking trackingPoll");
 				trackingPoll.checkObject();
 				createResultsTable(trackingPoll.answers.length, trackingPoll.answers);
 				invalidateDisplayList();
				validateNow();
 			}
 		
 			private function stopPoll():void{
				refreshResults();
				btnRefreshResults.label = ResourceUtil.getInstance().getString('bbb.polling.stats.repost');
				btnRefreshResults.removeEventListener(MouseEvent.CLICK, refreshResults);
				btnRefreshResults.addEventListener(MouseEvent.CLICK, publishPollAgain);
				btnRefreshResults.addEventListener(MouseEvent.MOUSE_OVER, generateWebKey);
				
				btnClosePoll.label = ResourceUtil.getInstance().getString('bbb.polling.stats.close');
				btnClosePoll.removeEventListener(MouseEvent.CLICK, closeWindow);
				btnClosePoll.addEventListener(MouseEvent.CLICK, closeButtonClick); 

				//LogUtil.debug(LOGNAME+"Poll has been stopped; state of the poll object:");
				trackingPoll.status = false;
				trackingPoll.checkObject();
				stopViewersPolls();					
			}
			
			private function publishPollAgain(e:Event):void{
				//LogUtil.debug(LOGNAME + "inside publishPollAgain()");
				//trackingPoll.checkObject();
				var event:PublishPollEvent = new PublishPollEvent(PublishPollEvent.REPOST);
				event.poll = trackingPoll;
				dispatchEvent(event);
				closeWindow();
			}
			
			private function generateWebKey():void{
				if (trackingPoll.publishToWeb){
					LogUtil.debug(LOGNAME + "About to generate web key");
					var generate: GenerateWebKeyEvent = new GenerateWebKeyEvent(GenerateWebKeyEvent.GENERATE);
					LogUtil.debug(LOGNAME + "Survived making new event");
					generate.poll = trackingPoll;
					generate.repost = true;
					LogUtil.debug(LOGNAME + "Survived adding poll to event, preparing to dispatch");
					dispatchEvent(generate);
					LogUtil.debug(LOGNAME + "Survived dispatching event");
				}
			}
			
			private function closeButtonClick(e:Event):void{
				LogUtil.debug(LOGNAME + "inside closeButtonClick, checking trackingPoll");
				trackingPoll.checkObject();
				// The poll still has the proper webKey here, try and run a save
				/*
				var event:SavePollEvent = new SavePollEvent(SavePollEvent.SAVE);
				event.poll = trackingPoll;
				dispatchEvent(event);
				*/
				closeWindow();
			}
			
			private function stopViewersPolls():void{
				LogUtil.debug(LOGNAME + "inside stopViewersPolls()");
				var stopPollEvent:StopPollEvent = new StopPollEvent(StopPollEvent.STOP_POLL);
				stopPollEvent.poll.title = title;
				dispatchEvent(stopPollEvent);
			}
 		
			// function receives Array.length and ArrayCollection
			private function createResultsTable(amount:uint, content:Array):void{
				LogUtil.debug(LOGNAME+"Entering createResultsTable");
				var _tx: Text;
				var _votes: Text;
				var _percent: Text;
				var _hb: HBox; 
				var _line: HRule;
				
				var totalVotes:int = 0;
				for (var n:int = 0; n < trackingPoll.votes.length; n++){
					totalVotes+= int(trackingPoll.votes[n]);
				}
				
				// delete existing rows
				resultBox.removeAllChildren();
				
				// creating rows one by one
				for (var i:int = 0; i < amount; i++) {
					_tx = new Text();
					_votes= new Text;
					_percent= new Text();
					_hb = new HBox();
					_line = new HRule();
					
					_line.width = 290;
					
					_tx.name = "option" +i;
					_tx.width = 200;
					// assigning array element to text field
					_tx.text =content[i].toString(); 
										
					_votes.name = "votes" +i;
					_votes.width = 30;
					_votes.text = trackingPoll.votes[i];
					
					_percent.name = "percent" +i;
					_percent.width = 50;
					
					// Percentage is in terms of how many votes each option has in terms of total votes
					if (totalVotes > 0){
						_percent.text = Math.round(100*(trackingPoll.votes[i]/totalVotes)) + "%";
					}else{
						// Prevents percentages from displaying misleading results before any votes come in, and from dividing by zero
						_percent.text = " ";
					}
					
					resultBox.addChild(_hb);					
					_hb.addChild(_tx);
					_hb.addChild(_votes);
					_hb.addChild(_percent);
					
					resultBox.addChild(_line);
				} // end of loop
					
				LogUtil.debug(LOGNAME+"About to enter didNotVote()");			
				didNotVote();
				LogUtil.debug(LOGNAME+"survived didNotVote()");
				invalidateDisplayList();
				resultBox.validateNow();	
			} // end of function createResultsTable
			
			private function didNotVote():void{
				LogUtil.debug(LOGNAME+"Entering didNotVote()");
				var _tx:Text = new Text();
				var _votes:Text= new Text;
				var _hb:HBox = new HBox();
				
				_tx.name = "optionNull";
				_tx.width = 200;
				_tx.text = ResourceUtil.getInstance().getString('bbb.polling.stats.didNotVote'); 
										
				_votes.name = "voteNull";
				_votes.width = 30;
				
				LogUtil.debug(LOGNAME+"TrackingPoll's didNotVote is: " + trackingPoll.didNotVote);
				_votes.text = trackingPoll.didNotVote.toString();
								
				resultBox.addChild(_hb);					
				_hb.addChild(_tx);
				_hb.addChild(_votes);
			}
			
		]]>
	</mx:Script>

	
 
	
	<!-- Prototype of Polling Statistics View Design -->
        <mx:VBox width="100%" height="75%" horizontalAlign="center" paddingLeft="10" paddingRight="10">
				
				
				<mx:HBox id="webPollBox" width="90%" height="35" paddingTop="10" visible="{trackingPoll.publishToWeb}">
					<mx:Text text="{ResourceUtil.getInstance().getString('bbb.polling.pollStats.webPollURL')}"
						width="180"/>
					<mx:TextArea id="webPollURLBox" 
						editable="false" 
						text="" 
						horizontalScrollPolicy="off" 
						verticalScrollPolicy="off" 
						height="25"/>          
				</mx:HBox>
               	
               	<mx:Text width="200" 
               		paddingTop="15" paddingBottom="10" 
               		fontWeight="bold" textAlign="center"
                    text="{question}"/>
     
        		<mx:Box id="resultBox"  width="90%" height="90%" >
        			
        		</mx:Box>
  					
          		
          		
       </mx:VBox>
       <mx:ControlBar width="100%" horizontalAlign="center">
       <mx:Button id="btnRefreshResults" label="{ResourceUtil.getInstance().getString('bbb.polling.stats.refresh')}" click="refreshResults()"  width="100" height="30"/>
       <mx:Button id="btnClosePoll" label="{ResourceUtil.getInstance().getString('bbb.polling.stats.stopPoll')}" click="stopPoll()"  width="100" height="30"/>
       </mx:ControlBar> 	 


</MDIWindow>
